{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar getType_1 = __importStar(require(\"./getType\"));\nexports.default = function (list) {\n  var listType = (0, getType_1.default)(list);\n  switch (listType) {\n    case getType_1.types.ARRAY:\n      return list;\n    case getType_1.types.OBJECT:\n      return Object.values(list);\n    case getType_1.types.SET:\n      return Array.from(list);\n    case getType_1.types.MAP:\n      return Array.from(list.values());\n    default:\n      return [];\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEAA,kBAAe,UAACC,IAAS;EACvB,IAAMC,QAAQ,GAAG,qBAAO,EAACD,IAAI,CAAC;EAE9B,QAAQC,QAAQ;IACd,KAAKC,eAAK,CAACC,KAAK;MACd,OAAOH,IAAI;IACb,KAAKE,eAAK,CAACE,MAAM;MACf,OAAOC,MAAM,CAACC,MAAM,CAACN,IAAI,CAAC;IAC5B,KAAKE,eAAK,CAACK,GAAG;MACZ,OAAOC,KAAK,CAACC,IAAI,CAACT,IAAI,CAAC;IACzB,KAAKE,eAAK,CAACQ,GAAG;MACZ,OAAOF,KAAK,CAACC,IAAI,CAACT,IAAI,CAACM,MAAM,EAAE,CAAC;IAClC;MACE,OAAO,EAAE;EAAC;AAEhB,CAAC","names":["exports","list","listType","getType_1","ARRAY","OBJECT","Object","values","SET","Array","from","MAP"],"sources":["../../src/___utils/convertListToArray.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}